{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Course Notes for Everyone! \u00b6 One of the best things about our school culture is how willing we are to help each other out. Let's maintain that for future generations by sharing our notes on the subjects we're taking :) Contribution \u00b6 If you've made some notes and you'd like to share them, go ahead and make a Pull Request to add them in! The format is pretty self-explanatory. If you don't know how to use GitHub, but already have a link to your notes, get in touch with Wei Min ( weimin_cher@mymail.sutd.edu.sg ) and he'll help you out. If you're worried about the quality of your notes and don't want to share them without someone vetting them, we recommend just sharing them! But if you want someone to look them over, look for Wei Min. Tip Your notes don't have to be hosted on GitHub. Sharing a Dropbox link or OneDrive link is fine also! What Not to Post \u00b6 Please don't post official course materials. This includes the following: Lecture slides Readings Homework question papers That kind of thing belongs here , though we're still working out a standard way to get permission for posting it online from the Profs. If you have any ideas, feel free to contribute!","title":"Home"},{"location":"#course-notes-for-everyone","text":"One of the best things about our school culture is how willing we are to help each other out. Let's maintain that for future generations by sharing our notes on the subjects we're taking :)","title":"Course Notes for Everyone!"},{"location":"#contribution","text":"If you've made some notes and you'd like to share them, go ahead and make a Pull Request to add them in! The format is pretty self-explanatory. If you don't know how to use GitHub, but already have a link to your notes, get in touch with Wei Min ( weimin_cher@mymail.sutd.edu.sg ) and he'll help you out. If you're worried about the quality of your notes and don't want to share them without someone vetting them, we recommend just sharing them! But if you want someone to look them over, look for Wei Min. Tip Your notes don't have to be hosted on GitHub. Sharing a Dropbox link or OneDrive link is fine also!","title":"Contribution"},{"location":"#what-not-to-post","text":"Please don't post official course materials. This includes the following: Lecture slides Readings Homework question papers That kind of thing belongs here , though we're still working out a standard way to get permission for posting it online from the Profs. If you have any ideas, feel free to contribute!","title":"What Not to Post"},{"location":"40.302/","text":"40.302 Advanced Topics in Optimization \u00b6 No. of Credits: 6 Subject Credits Pre-requisites: 40.002 Optimisation Course Description \u00b6 This course is a follow-up to the ESD core course in Optimisation that students take in Term 4. The course will cover advanced topics in optimisation with a strong focus on modelling, formulations and optimisation techniques. Students will be introduced to the basics and design of algebraic modelling languages and spreadsheet models for describing optimisation problems. The primary application on which the course will be based is scheduling. Through the application, students will be exposed to advanced topics in optimisation such as proving optimality of schedules, integer programming formulations, heuristics, deterministic and stochastic dynamic optimization frameworks. Learning Objectives \u00b6 At the end of the term, students will be able to: Use optimization techniques as a decision-making tool in scheduling applications. Model optimization problems using algebraic modeling languages and spreadsheets. Solve moderate-sized yet practical optimization problems that are not simple enough to be solved by hand using techniques such as integer programming, heuristics, deterministic and stochastic dynamic optimization. Measurable Outcomes \u00b6 Formulate practical optimization problems in the scheduling domain that effectively tradeoff realism with tractability Use an algebraic modeling language to solve scheduling problems using the tool of integer programming Identify and develop appropriate methodologies to solve optimization problems in scheduling Course Notes \u00b6 This set of course notes was graciously shared by Yustynn Panicker , updated as of 06 March 2019. Follow him on GitHub and give him your messages of appreciation! Download","title":"40.302 Advanced Topics in Optimization"},{"location":"40.302/#40302-advanced-topics-in-optimization","text":"No. of Credits: 6 Subject Credits Pre-requisites: 40.002 Optimisation","title":"40.302 Advanced Topics in Optimization"},{"location":"40.302/#course-description","text":"This course is a follow-up to the ESD core course in Optimisation that students take in Term 4. The course will cover advanced topics in optimisation with a strong focus on modelling, formulations and optimisation techniques. Students will be introduced to the basics and design of algebraic modelling languages and spreadsheet models for describing optimisation problems. The primary application on which the course will be based is scheduling. Through the application, students will be exposed to advanced topics in optimisation such as proving optimality of schedules, integer programming formulations, heuristics, deterministic and stochastic dynamic optimization frameworks.","title":"Course Description"},{"location":"40.302/#learning-objectives","text":"At the end of the term, students will be able to: Use optimization techniques as a decision-making tool in scheduling applications. Model optimization problems using algebraic modeling languages and spreadsheets. Solve moderate-sized yet practical optimization problems that are not simple enough to be solved by hand using techniques such as integer programming, heuristics, deterministic and stochastic dynamic optimization.","title":"Learning Objectives"},{"location":"40.302/#measurable-outcomes","text":"Formulate practical optimization problems in the scheduling domain that effectively tradeoff realism with tractability Use an algebraic modeling language to solve scheduling problems using the tool of integer programming Identify and develop appropriate methodologies to solve optimization problems in scheduling","title":"Measurable Outcomes"},{"location":"40.302/#course-notes","text":"This set of course notes was graciously shared by Yustynn Panicker , updated as of 06 March 2019. Follow him on GitHub and give him your messages of appreciation! Download","title":"Course Notes"},{"location":"40.305/","text":"40.305 Advanced Topics in Stochastic Modelling \u00b6 No. of Credits: 6 Subject Credits Pre-requisites: 40.001 Probability ( OR 30.003 / 50.034 Introduction to Probability and Statistics) 40.012 Manufacturing and Service Operation Pre-requisites (for Exchange Students): Markov chains and queuing theory Course Description \u00b6 This is a follow-up to the introduction course on Stochastic Modelling. Students learn advanced methods in stochastic modelling with a focus on business, engineering and financial math applications. Topics to be covered include renewal theory and martingales (discrete time). Time permitting other topics such as branching processes, spatial processes or stochastic networks could be introduced. Learning Objectives \u00b6 At the end of the term, students will be able to: Apply the technique of Martingale in finance Apply renewal theory in operations management Measurable Outcomes \u00b6 Show the examples of Martingale, Renewal Process, and Brownian Motion. Construct or develop a stochastic model using these concepts. Identify and solve engineering problems involving these concepts. Analyse these concepts in a broader context of probability theory. Course Notes \u00b6 This set of course notes was graciously shared by Yustynn Panicker , updated as of 30 April 2019. Follow him on GitHub and give him your messages of appreciation! Download","title":"40.305 Advanced Topics in Stochastic Modelling"},{"location":"40.305/#40305-advanced-topics-in-stochastic-modelling","text":"No. of Credits: 6 Subject Credits Pre-requisites: 40.001 Probability ( OR 30.003 / 50.034 Introduction to Probability and Statistics) 40.012 Manufacturing and Service Operation Pre-requisites (for Exchange Students): Markov chains and queuing theory","title":"40.305 Advanced Topics in Stochastic Modelling"},{"location":"40.305/#course-description","text":"This is a follow-up to the introduction course on Stochastic Modelling. Students learn advanced methods in stochastic modelling with a focus on business, engineering and financial math applications. Topics to be covered include renewal theory and martingales (discrete time). Time permitting other topics such as branching processes, spatial processes or stochastic networks could be introduced.","title":"Course Description"},{"location":"40.305/#learning-objectives","text":"At the end of the term, students will be able to: Apply the technique of Martingale in finance Apply renewal theory in operations management","title":"Learning Objectives"},{"location":"40.305/#measurable-outcomes","text":"Show the examples of Martingale, Renewal Process, and Brownian Motion. Construct or develop a stochastic model using these concepts. Identify and solve engineering problems involving these concepts. Analyse these concepts in a broader context of probability theory.","title":"Measurable Outcomes"},{"location":"40.305/#course-notes","text":"This set of course notes was graciously shared by Yustynn Panicker , updated as of 30 April 2019. Follow him on GitHub and give him your messages of appreciation! Download","title":"Course Notes"},{"location":"50.003/","text":"50.003 Elements of Software Construction \u00b6 No. of Credits: 12 Subject Credits Pre-requisites: 50.001 Introduction to Information Systems & Programming Course Description \u00b6 This course is an introduction to the fundamental principles and techniques of software construction that have greatest impact on practice. Topics include capturing the essence of a problem by recognizing and inventing suitable abstractions; key paradigms, including basic concepts of software design and their expression using notations from Unified Modeling Language (UML); software testing, automated software test generation, automated software security testing via blackbox, greybox and whitebox fuzzing approaches, detection and removal of software code smells, software coding standards to avoid security loopholes, concurrent programming, including programming with threads and processes, understanding concurrency problems like deadlock and data race. This course includes exercises in software design, implementation, testing and reasoning. Learning Objectives \u00b6 Design medium-scale software system from scratch: formulating and analyzing the problem to be solved; writing formal software requirements, exploring and formulating system designs; and using extensive and systematic testing and reasoning to ensure quality. Apply key software engineering ideas, including invariants, decoupling, and data abstraction. Apply key software engineering ideas, including software design, specification, abstraction, verification and correctness. Apply widely used design concepts and notations (UML diagrams) and patterns in exploring and articulating problems and designs. Learning effective techniques on ensuring quality of large-scale software systems. Apply concepts of systematic software testing to discover bugs (including security vulnerabilities) in large-scale software systems. Apply concepts to reason about the security loopholes in software systems. Learning secure software coding standards. Learning key concepts in developing concurrent programs. Learning key concepts in reasoning and testing concurrent programs. Measurable Outcomes \u00b6 Build medium-scale software prototype (LO 1-5). Design solution to questions related to the requirement prior to software development. (LO1, LO2 and LO4). Design blackbox, whitebox and diabolic software tests for validating software prototype. (LO6). Design critical part of the software by reasoning about its security. (LO8). Design small/medium-scale concurrent programs. (LO9). Design techniques to reason about the correctness of the concurrent programs (LO10). Design software prototype with the objective of its maintainability and security. (LO5, LO7). Design sofware testing methodologies to automatically discover potential security vulnerabilities, such as program crashes (LO6). Course Notes \u00b6 This set of course notes was graciously shared by Joel Huang , updated as of 25 April 2019. Follow him on GitHub and give him your messages of appreciation! Download","title":"50.003 Elements of Software Construction"},{"location":"50.003/#50003-elements-of-software-construction","text":"No. of Credits: 12 Subject Credits Pre-requisites: 50.001 Introduction to Information Systems & Programming","title":"50.003 Elements of Software Construction"},{"location":"50.003/#course-description","text":"This course is an introduction to the fundamental principles and techniques of software construction that have greatest impact on practice. Topics include capturing the essence of a problem by recognizing and inventing suitable abstractions; key paradigms, including basic concepts of software design and their expression using notations from Unified Modeling Language (UML); software testing, automated software test generation, automated software security testing via blackbox, greybox and whitebox fuzzing approaches, detection and removal of software code smells, software coding standards to avoid security loopholes, concurrent programming, including programming with threads and processes, understanding concurrency problems like deadlock and data race. This course includes exercises in software design, implementation, testing and reasoning.","title":"Course Description"},{"location":"50.003/#learning-objectives","text":"Design medium-scale software system from scratch: formulating and analyzing the problem to be solved; writing formal software requirements, exploring and formulating system designs; and using extensive and systematic testing and reasoning to ensure quality. Apply key software engineering ideas, including invariants, decoupling, and data abstraction. Apply key software engineering ideas, including software design, specification, abstraction, verification and correctness. Apply widely used design concepts and notations (UML diagrams) and patterns in exploring and articulating problems and designs. Learning effective techniques on ensuring quality of large-scale software systems. Apply concepts of systematic software testing to discover bugs (including security vulnerabilities) in large-scale software systems. Apply concepts to reason about the security loopholes in software systems. Learning secure software coding standards. Learning key concepts in developing concurrent programs. Learning key concepts in reasoning and testing concurrent programs.","title":"Learning Objectives"},{"location":"50.003/#measurable-outcomes","text":"Build medium-scale software prototype (LO 1-5). Design solution to questions related to the requirement prior to software development. (LO1, LO2 and LO4). Design blackbox, whitebox and diabolic software tests for validating software prototype. (LO6). Design critical part of the software by reasoning about its security. (LO8). Design small/medium-scale concurrent programs. (LO9). Design techniques to reason about the correctness of the concurrent programs (LO10). Design software prototype with the objective of its maintainability and security. (LO5, LO7). Design sofware testing methodologies to automatically discover potential security vulnerabilities, such as program crashes (LO6).","title":"Measurable Outcomes"},{"location":"50.003/#course-notes","text":"This set of course notes was graciously shared by Joel Huang , updated as of 25 April 2019. Follow him on GitHub and give him your messages of appreciation! Download","title":"Course Notes"}]}